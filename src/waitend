#! /usr/bin/env python3

"""
waitend   Copyright (C) 2013 St√©phane Blondon
This tool is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or
(at your option) any later version.


usage: waitend [--mines] [--delay DELAY] process command

The process argument is either PID or name.


options:
 --delay: delay of the wait loop
 --mines: search process only in user' processes
"""

import argparse
import errno
import os
import subprocess
import time


DEFAULT_DELAY = 60

def main():
    args = parse_arguments()
    process = args.process
    delay = args.delay
    only_mine_procs = args.mines
    cmd = args.cmd
    while True:
        if process_is_running(process, only_mine_procs):
            time.sleep(delay)
        else:
            execute_cmd(cmd)
            break

def parse_arguments():
    parser = argparse.ArgumentParser(description='Execute a command when another process is ended')
    parser.add_argument("process", help="the pending process")
    parser.add_argument("cmd", help="command executed when pid finished")
    parser.add_argument('--delay', dest='delay', default=DEFAULT_DELAY, type=int,
        help='wait DELAY seconds between two process checks (default is %ss)' % DEFAULT_DELAY)
    parser.add_argument('--mines', action="store_true",
        help='search only in processes owned by user')
    return parser.parse_args()

def process_is_running(process, only_mine_procs):
    is_running = False
    try:
        pid = int(process)
    except ValueError:
        pid = None
        is_running = process in list_processes(only_mine_procs)

    if pid:
        try:
            os.kill(pid, 0)
            is_running = True
        except OSError as err:
            if error_process_not_found(err):
                is_running = False
            elif error_access_on_process(err):
                is_running = not only_mine_procs
            else: # Something else went wrong
                raise
    return is_running

def error_process_not_found(error):
    return error.errno == errno.ESRCH

def error_access_on_process(error):
    return error.errno == errno.EPERM

def list_processes(only_mine_procs):
    cmd = ['ps', '--no-headers']
    cmd.extend(_mine_cmd(only_mine_procs))
    cmd.extend(["-eo", "command"])
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    stdout, _ = process.communicate()
    return [line.split()[0]
            for line
            in stdout.decode("utf-8").split('\n')
            if line]

def _mine_cmd(only_mine_procs):
    if only_mine_procs:
        return ["--user", str(os.getuid())]
    else:
        return []

def execute_cmd(cmd):
    subprocess.call(cmd.split())


if __name__ == '__main__':
    main()
